local pon={}_G.pon=pon local type,count=type,table.Count local tonumber=tonumber local format=string.format do local encode={}local try_cache local cache_size=0 local type,count=type,table.Count local tonumber=tonumber local format=string.format encode["table"]=function(self,tbl,output,cache)if(cache[tbl])then table.insert(output,"("..cache[tbl]..")")return else cache_size=cache_size+1 cache[tbl]=cache_size end local nSize=#tbl local kvSize=count(tbl)-nSize if(nSize==0&&kvSize>0)then table.insert(output,"[")else table.insert(output,"{")if nSize>0 then for i=1,nSize do local v=tbl[i]if v==nil then table.insert(output,"!")continue end local tv=type(v)if(tv=="string")then local pid=cache[v]if(pid)then table.insert(output,"("..pid..")")else cache_size=cache_size+1 cache[v]=cache_size self.string(self,v,output,cache)end else self[tv](self,v,output,cache)end end end end if(kvSize>0)then if(nSize>0)then table.insert(output,"~")end for k,v in next,tbl do local key_type=type(k)if key_type!="number"||k<1||k>nSize then local tk,tv=key_type,type(v)if(tk=="string")then local pid=cache[k]if(pid)then table.insert(output,"("..pid..")")else cache_size=cache_size+1 cache[k]=cache_size self.string(self,k,output,cache)end else self[tk](self,k,output,cache)end if(tv=="string")then local pid=cache[v]if(pid)then table.insert(output,"("..pid..")")else cache_size=cache_size+1 cache[v]=cache_size self.string(self,v,output,cache)end else self[tv](self,v,output,cache)end end end end table.insert(output,"}")end local gsub=string.gsub encode["string"]=function(self,str,output)local estr,count=gsub(str,";","\\;")if(count==0)then table.insert(output,"'"..str..";")else table.insert(output,"\""..estr.."\";")end end encode["number"]=function(self,num,output)table.insert(output,tonumber(num)..";")end encode["boolean"]=function(self,val,output)table.insert(output,val&&"t"||"f")end encode["Vector"]=function(self,val,output)table.insert(output,("v"..val.x..","..val.y)..(","..val.z..";"))end encode["Angle"]=function(self,val,output)table.insert(output,("a"..val.p..","..val.y)..(","..val.r..";"))end encode["Entity"]=function(self,val,output)table.insert(output,"E"..(IsValid(val)&&val:EntIndex()..";"||"#"))end encode["Player"]=encode["Entity"]encode["Vehicle"]=encode["Entity"]encode["Weapon"]=encode["Entity"]encode["NPC"]=encode["Entity"]encode["NextBot"]=encode["Entity"]encode["PhysObj"]=encode["Entity"]encode["nil"]=function()table.insert(output,"?")end encode.__index=function(key)ErrorNoHalt("Cannot encode "..tostring(key)..", encoded as nil.")return encode["nil"]end do local empty,concat=table.Empty,table.concat function pon.encode(tbl)local output={}cache_size=0 encode["table"](encode,tbl,output,{})local res=concat(output)return res end end end do local tonumber=tonumber local find,sub,gsub,Explode=string.find,string.sub,string.gsub,string.Explode local Vector,Angle,Entity=Vector,Angle,Entity local decode={}decode["{"]=function(self,index,str,cache)local cur={}table.insert(cache,cur)local k,v,tk,tv=1,nil,nil,nil while(!!1)do tv=sub(str,index,index)if(!tv||tv=="~")then index=index+1 break end if(tv=="}")then return index+1,cur end index=index+1 index,v=self[tv](self,index,str,cache)cur[k]=v k=k+1 end while(!!1)do tk=sub(str,index,index)if(!tk||tk=="}")then index=index+1 break end index=index+1 index,k=self[tk](self,index,str,cache)tv=sub(str,index,index)index=index+1 index,v=self[tv](self,index,str,cache)cur[k]=v end return index,cur end decode["["]=function(self,index,str,cache)local cur={}table.insert(cache,cur)local k,v,tk,tv=1,nil,nil,nil while(!!1)do tk=sub(str,index,index)if(!tk||tk=="}")then index=index+1 break end index=index+1 index,k=self[tk](self,index,str,cache)if!k then continue end tv=sub(str,index,index)index=index+1 if!self[tv]then print("did not find type: "..tv)end index,v=self[tv](self,index,str,cache)cur[k]=v end return index,cur end decode["\""]=function(self,index,str,cache)local finish=find(str,"\";",index,!!1)local res=gsub(sub(str,index,finish-1),"\\;",";")index=finish+2 table.insert(cache,res)return index,res end decode["'"]=function(self,index,str,cache)local finish=find(str,";",index,!!1)local res=sub(str,index,finish-1)index=finish+1 table.insert(cache,res)return index,res end decode["!"]=function(self,index,str,cache)return index,nil end decode["n"]=function(self,index,str,cache)index=index-1 local finish=find(str,";",index,!!1)local num=tonumber(sub(str,index,finish-1))index=finish+1 return index,num end decode["0"]=decode["n"]decode["1"]=decode["n"]decode["2"]=decode["n"]decode["3"]=decode["n"]decode["4"]=decode["n"]decode["5"]=decode["n"]decode["6"]=decode["n"]decode["7"]=decode["n"]decode["8"]=decode["n"]decode["9"]=decode["n"]decode["-"]=decode["n"]decode["("]=function(self,index,str,cache)local finish=find(str,")",index,!!1)local num=tonumber(sub(str,index,finish-1))index=finish+1 return index,cache[num]end decode["t"]=function(self,index)return index,!!1 end decode["f"]=function(self,index)return index,!1 end decode["v"]=function(self,index,str,cache)local finish=find(str,";",index,!!1)local vecStr=sub(str,index,finish-1)index=finish+1 local segs=Explode(",",vecStr,!1)return index,Vector(tonumber(segs[1]),tonumber(segs[2]),tonumber(segs[3]))end decode["a"]=function(self,index,str,cache)local finish=find(str,";",index,!!1)local angStr=sub(str,index,finish-1)index=finish+1 local segs=Explode(",",angStr,!1)return index,Angle(tonumber(segs[1]),tonumber(segs[2]),tonumber(segs[3]))end decode["E"]=function(self,index,str,cache)if(str[index]=="#")then index=index+1 return index,NULL else local finish=find(str,";",index,!!1)local num=tonumber(sub(str,index,finish-1))index=finish+1 return index,Entity(num)end end decode["P"]=function(self,index,str,cache)local finish=find(str,";",index,!!1)local num=tonumber(sub(str,index,finish-1))index=finish+1 return index,Entity(num)||NULL end decode["?"]=function(self,index,str,cache)return index+1,nil end function pon.decode(data)local _,res=decode[sub(data,1,1)](decode,2,data,{})return res end end